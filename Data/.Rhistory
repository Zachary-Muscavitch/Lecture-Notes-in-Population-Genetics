dat <- subset(dat, Date <= "2021-04-07")
dat$Date
k_stud <- dat$k_stud
N_stud <- dat$N_stud
dts <- dat$Date
daily_smoothed <- analyze_daily(k_sens, N_sens,
k_spec, N_spec,
k_stud, N_stud,
dts,
smoothed = 1,
monitor = 200)
report_results(daily_smoothed,
"Daily results (smoothed)")
print(daily_smoothed$fit_stan, pars = c("phi_center", "rho_center", "phi", "rho", "sigma_t"), digits_summary = 3)
print(daily_smoothed$fit_stan, pars = c("phi_mean", "rho_mean", "sigma_t"), digits_summary = 3)
dat <- read_sheet("https://docs.google.com/spreadsheets/d/1OwTbYIJCk7Um8vzD7DloDSG-EF-GuVvaLeCpzBFMTe4/edit#gid=1245557938",
range = "a5:c63",
col_types = "Dii")
colnames(dat) <- c("Date", "N_stud", "k_stud")
# ## 8 & 9 September not eneterd in UTC format in Google Sheet
# ##
# dat$Date[27] <- "2020-09-08"
# dat$Date[28] <- "2020-09-09"
## 8 April not entered
## dat$Date[56] <- "2021-04-08"
## exclude "defective" data
##
dat <- subset(dat, !is.na(k_stud) & !is.na(N_stud))
dat <- subset(dat, N_stud >= k_stud)
dat <- subset(dat, !is.na(Date))
k_stud <- dat$k_stud
N_stud <- dat$N_stud
dts <- dat$Date
daily_smoothed <- analyze_daily(k_sens, N_sens,
k_spec, N_spec,
k_stud, N_stud,
dts,
smoothed = 1,
monitor = 200)
report_results(daily_smoothed,
"Daily results (smoothed)")
dat <- read_sheet("https://docs.google.com/spreadsheets/d/1OwTbYIJCk7Um8vzD7DloDSG-EF-GuVvaLeCpzBFMTe4/edit#gid=1245557938",
range = "a5:c63",
col_types = "Dii")
colnames(dat) <- c("Date", "N_stud", "k_stud")
# ## 8 & 9 September not eneterd in UTC format in Google Sheet
# ##
# dat$Date[27] <- "2020-09-08"
# dat$Date[28] <- "2020-09-09"
## 8 April not entered
## dat$Date[56] <- "2021-04-08"
## exclude "defective" data
##
dat <- subset(dat, !is.na(k_stud) & !is.na(N_stud))
dat <- subset(dat, N_stud >= k_stud)
dat <- subset(dat, !is.na(Date))
k_stud <- dat$k_stud
N_stud <- dat$N_stud
dts <- dat$Date
daily_smoothed <- analyze_daily(k_sens, N_sens,
k_spec, N_spec,
k_stud, N_stud,
dts,
smoothed = 1,
monitor = 200)
report_results(daily_smoothed,
"Daily results (smoothed)")
print(daily_smoothed$fit_stan, pars = c("phi_mean", "rho_mean", "sigma_t"), digits_summary = 3)
x <- qnorm(c(0.025, 0.975), 4.0, 0.5)
exp(x)/(1 + exp(x))
daily_smoothed <- analyze_daily(k_sens, N_sens,
k_spec, N_spec,
k_stud, N_stud,
dts,
smoothed = 1,
monitor = 200)
report_results(daily_smoothed,
"Daily results (smoothed)")
print(daily_smoothed$fit_stan, pars = c("phi_mean", "rho_mean", "sigma_t"), digits_summary = 3)
exp(4.5)/(1 + exp(4.5))
exp(5.0)/(1 + exp(5.0))
x <- qnorm(c(0.025, 0.975), 5.0, 0.5)
exp(x)/(1 + exp(x))
daily_smoothed <- analyze_daily(k_sens, N_sens,
k_spec, N_spec,
k_stud, N_stud,
dts,
smoothed = 1,
monitor = 200)
report_results(daily_smoothed,
"Daily results (smoothed)")
source("UConn-student-prevalence.R")
print(daily_smoothed$fit_stan, pars = c("phi_mean", "rho_mean"))
print(daily_raw$fit_stan, pars = c("phi_mean", "rho_mean"))
log(0.94/0.06)
log(0.98/0.02)
print(daily_raw$fit_stan, pars = c("phi_mean", "rho_mean"), digits_summary = 3)
log(0.996/0.004)
log(0.997/0.003)
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
print(daily_raw$fit_stan, pars = c("phi_mean", "rho_mean"), digits_summary = 3)
print(daily_smoothed$fit_stan, pars = c("phi_mean", "rho_mean"), digits_summary = 3)
source("prevalence.R")
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
print(daily_smoothed$fit_stan, pars = c("phi_mean", "rho_mean"), digits_summary = 3)
x <- c(1.8, 2.8, 3.8)
exp(x)/(1 + exp(x))
x <- c(1.3, 2.8, 3.3)
exp(x)/(1 + exp(x))
x <- c(2.3, 2.8, 3.3)
exp(x)/(1 + exp(x))
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
x <- c(3, 2.8, 3.2)
exp(x)/(1 + exp(x))
print(daily_raw$fit_stan, pars = c("phi_mean", "rho_mean"), digits_summary = 3)
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
print(daily_raw$fit_stan, pars = c("phi_mean", "rho_mean"), digits_summary = 3)
print(daily_raw$fit_smoothed, pars = c("phi_mean", "rho_mean"), digits_summary = 3)
print(daily_smoothed$fit_stan, pars = c("phi_mean", "rho_mean"), digits_summary = 3)
x <- c(3.5, 3.3, 3.7)
exp(x)/(1 + exp(x))
x <- c(3.5, 3.2, 3.8)
exp(x)/(1 + exp(x))
x <- c(3.5, 3.1, 3.9)
exp(x)/(1 + exp(x))
x <- c(3.5, 3.0, 4.0)
exp(x)/(1 + exp(x))
exp(x)/(1 + exp(x))
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
dat$Date
source("UConn-student-prevalence.R")
8 x (368.06 + 24.38) + (747.20 + 48.75) + (1093.19 + 97.52)
8 * (368.06 + 24.38) + (747.20 + 48.75) + (1093.19 + 97.52)
(8 * (368.06 + 24.38) + (747.20 + 48.75) + (1093.19 + 97.52))*12
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
source("prevalence.R")
exp(-2)
exp(-4)
exp(-5)
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
days <- dts - lag(dts)
days[1] <- 1
days
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
source("UConn-student-prevalence.R")
source("prevalence.R")
today() - "2021-01-28"
date
date()
date() - "2021-01-28"
date() - as.Date("2021-01-28")
as.Date(date()) - as.Date("2021-01-28")
help("date")
Sys.Date()
as.Date(Sys.Date()) - as.Date("2021-01-28")
89/7
1815/(89/7)
source("prevalence.R")
source("prevalence.R")
source("prevalence.R")
source("prevalence.R")
cohen <- function(x, y, sd) {
return((x - y)/sd)
}
set.seed(1234)
create_study <- function(treatment, control, sd, n) {
df <- data.frame(treatment = rnorm(n, treatment, sd),
control = rnorm(n, treatment, sd))
return(df)
}
study_one <- create_study(10, 9, 1, 100)
study_two <- create_study(1, 0.9, 0.1, 100)
summary(study_one)
summary(study_two)
2^3
pooled_sd <- function(x, y) {
return(sqrt(x^2 + y^2))
}
effect_size_one <- cohen(mean(study_one$treatment), mean(study_one$control),
pooled_sd(study_one$treatment, study_one$control))
effect_size_two <- cohen(mean(study_two$treatment), mean(study_two$control),
pooled_sd(study_two$treatment, study_two$control))
effect_size_one
effect_size_two
pooled_sd <- function(x, y) {
return(sqrt((sd(x)^2 + sd(y)^2)/2))
}
effect_size_one <- cohen(mean(study_one$treatment), mean(study_one$control),
pooled_sd(study_one$treatment, study_one$control))
effect_size_two <- cohen(mean(study_two$treatment), mean(study_two$control),
pooled_sd(study_two$treatment, study_two$control))
effect_size_one
effect_size_two
mean(study_one$treatment) - mean(study_one$control)
set.seed(1234)
create_study <- function(treatment, control, sd, n) {
df <- data.frame(treatment = rnorm(n, treatment, sd),
control = rnorm(n, treatment, sd))
return(df)
}
study_one <- create_study(10, 8, 1, 1000)
study_two <- create_study(1, 0.8, 0.1, 100)
summary(study_one)
summary(study_two)
set.seed(1234)
create_study <- function(treatment, control, sd, n) {
df <- data.frame(treatment = rnorm(n, treatment, sd),
control = rnorm(n, control, sd))
return(df)
}
study_one <- create_study(10, 8, 1, 1000)
study_two <- create_study(1, 0.8, 0.1, 100)
summary(study_one)
summary(study_two)
pooled_sd <- function(x, y) {
return(sqrt((sd(x)^2 + sd(y)^2)/2))
}
effect_size_one <- cohen(mean(study_one$treatment), mean(study_one$control),
pooled_sd(study_one$treatment, study_one$control))
effect_size_two <- cohen(mean(study_two$treatment), mean(study_two$control),
pooled_sd(study_two$treatment, study_two$control))
effect_size_one
effect_size_two
se <- function(x, y, n) {
return(sqrt(sd(x)/n + sd(y)/n))
}
se_one <- se(study_one$treatment, study_one$control, nrow(study_one))
se_two <- se(study_two$treatment, study_two$control, nrow(study_two))
se_one
se_two
set.seed(1234)
create_study <- function(treatment, control, sd, n) {
df <- data.frame(treatment = rnorm(n, treatment, sd),
control = rnorm(n, control, sd))
return(df)
}
study_one <- create_study(10, 8, 1, 1000)
study_two <- create_study(1, 0.8, 0.1, 100)
summary(study_one)
summary(study_two)
cohen <- function(x, y, sd) {
return((x - y)/sd)
}
set.seed(1234)
create_study <- function(treatment, control, sd, n) {
df <- data.frame(treatment = rnorm(n, treatment, sd),
control = rnorm(n, control, sd))
return(df)
}
study_one <- create_study(10, 8, 1, 1000)
study_two <- create_study(1, 0.8, 0.1, 100)
summary(study_one)
summary(study_two)
pooled_sd <- function(x, y) {
## NOTE: divided by two because the sample size of treatment and control is the same
##
return(sqrt((sd(x)^2 + sd(y)^2)/2))
}
effect_size_one <- cohen(mean(study_one$treatment), mean(study_one$control),
pooled_sd(study_one$treatment, study_one$control))
effect_size_two <- cohen(mean(study_two$treatment), mean(study_two$control),
pooled_sd(study_two$treatment, study_two$control))
effect_size_one
effect_size_two
se <- function(x, y, n) {
return(sqrt(sd(x)/n + sd(y)/n))
}
se_one <- se(study_one$treatment, study_one$control, nrow(study_one))
se_two <- se(study_two$treatment, study_two$control, nrow(study_two))
se_one
se_two
cohen <- function(x, y, sd) {
return((x - y)/sd)
}
set.seed(1234)
create_study <- function(treatment, control, sd, n) {
df <- data.frame(treatment = rnorm(n, treatment, sd),
control = rnorm(n, control, sd))
return(df)
}
study_one <- create_study(10, 8, 1, 100)
study_two <- create_study(1, 0.8, 0.1, 10)
summary(study_one)
summary(study_two)
pooled_sd <- function(x, y) {
## NOTE: divided by two because the sample size of treatment and control is the same
##
return(sqrt((sd(x)^2 + sd(y)^2)/2))
}
effect_size_one <- cohen(mean(study_one$treatment), mean(study_one$control),
pooled_sd(study_one$treatment, study_one$control))
effect_size_two <- cohen(mean(study_two$treatment), mean(study_two$control),
pooled_sd(study_two$treatment, study_two$control))
effect_size_one
effect_size_two
se <- function(x, y, n) {
return(sqrt(sd(x)/n + sd(y)/n))
}
se_one <- se(study_one$treatment, study_one$control, nrow(study_one))
se_two <- se(study_two$treatment, study_two$control, nrow(study_two))
se_one
se_two
sd(study_one$treatment)
sd(study_one$control)
cohen <- function(x, y, sd) {
return((x - y)/sd)
}
set.seed(1234)
create_study <- function(treatment, control, sd, n) {
df <- data.frame(treatment = rnorm(n, treatment, sd),
control = rnorm(n, control, sd))
return(df)
}
study_one <- create_study(10, 8, 1, 100)
study_two <- create_study(1, 0.8, 0.1, 25)
summary(study_one)
summary(study_two)
pooled_sd <- function(x, y) {
## NOTE: divided by two because the sample size of treatment and control is the same
##
return(sqrt((sd(x)^2 + sd(y)^2)/2))
}
effect_size_one <- cohen(mean(study_one$treatment), mean(study_one$control),
pooled_sd(study_one$treatment, study_one$control))
effect_size_two <- cohen(mean(study_two$treatment), mean(study_two$control),
pooled_sd(study_two$treatment, study_two$control))
effect_size_one
effect_size_two
se <- function(x, y, n) {
return(sqrt(sd(x)/n + sd(y)/n))
}
se_one <- se(study_one$treatment, study_one$control, nrow(study_one))
se_two <- se(study_two$treatment, study_two$control, nrow(study_two))
se_one
se_two
cohen <- function(x, y, sd) {
return((x - y)/sd)
}
set.seed(1234)
create_study <- function(treatment, control, sd, n) {
df <- data.frame(treatment = rnorm(n, treatment, sd),
control = rnorm(n, control, sd))
return(df)
}
study_one <- create_study(10, 8, 1, 1000)
study_two <- create_study(1, 0.8, 0.1, 250)
summary(study_one)
summary(study_two)
pooled_sd <- function(x, y) {
## NOTE: divided by two because the sample size of treatment and control is the same
##
return(sqrt((sd(x)^2 + sd(y)^2)/2))
}
effect_size_one <- cohen(mean(study_one$treatment), mean(study_one$control),
pooled_sd(study_one$treatment, study_one$control))
effect_size_two <- cohen(mean(study_two$treatment), mean(study_two$control),
pooled_sd(study_two$treatment, study_two$control))
effect_size_one
effect_size_two
se <- function(x, y, n) {
return(sqrt(sd(x)/n + sd(y)/n))
}
se_one <- se(study_one$treatment, study_one$control, nrow(study_one))
se_two <- se(study_two$treatment, study_two$control, nrow(study_two))
se_one
se_two
source("prevalence.R")
source("prevalence.R")
source("prevalence.R")
source("prevalence.R")
source("prevalence.R")
source("prevalence.R")
fct <- function(b_top, b_bot, b_ec50, b_beta, x) {
b_top + (b_bot - b_top) /
(1 + exp((b_ec50 - x) * exp(b_beta)))
}
linear_rescale <- function(x, r_out) {
p <- (x - min(x)) / (max(x) - min(x))
r_out[[1]] + p * (r_out[[2]] - r_out[[1]])
}
set.seed(10)
x <- sort(runif(100, 1, 3))
a <- 0.2
y_mean <- fct(b_beta = 3, b_bot = 0.001, b_ec50 = 2, b_top = 0.999, x)
y <- linear_rescale(rbeta(100, a, (a-a*y_mean)/y_mean),  c(0.001, 0.999))
dat <- data.frame(x, y)
plot(dat$x, dat$y)
library(brms)
bfmod <- brms::bf(y ~ top + (bot - top) / (1 + exp((ec50 - x) * exp(beta))),
bot + ec50 + top + beta ~ 1,
nl = TRUE)
my_prior <- c(prior_string("normal(5, 5)", nlpar = "top"),
prior_string("normal(-5, 5)", nlpar = "bot"),
prior_string("gamma(5, 0.04)", nlpar = "ec50"),
prior_string("normal(0, 3)", nlpar = "beta"))
tt <- brm(formula = bfmod, data = dat, prior = my_prior,
family = Beta(link="logit"))#, sample_prior='only')
tt_ce <- conditional_effects(tt)
plot(tt_ce, points = TRUE)
library(brms)
bfmod <- brms::bf(y ~ top + (bot - top) / (1 + exp((ec50 - x) * exp(beta))),
bot + ec50 + top + beta ~ 1,
nl = TRUE)
tt <- brm(formula = bfmod, data = dat)
tt_ce <- conditional_effects(tt)
plot(tt_ce, points = TRUE)
library(brms)
bfmod <- brms::bf(y ~ top + (bot - top) / (1 + exp((ec50 - x) * exp(beta))),
bot + ec50 + top + beta ~ 1,
nl = TRUE)
tt <- brm(formula = bfmod, data = dat)
tt_ce <- conditional_effects(tt)
plot(tt_ce, points = TRUE)
library(brms)
bfmod <- brms::bf(y ~ top + (bot - top) / (1 + exp((ec50 - x) * exp(beta))),
bot + ec50 + top + beta ~ 1,
nl = TRUE)
my_prior <- c(prior_string("beta(9, 1)", nlpar = "top"),
prior_string("beta(1, 9)", nlpar = "bot"),
prior_string("gamma(5, 0.04)", nlpar = "ec50"),
prior_string("normal(0, 3)", nlpar = "beta"))
tt <- brm(formula = bfmod, data = dat, prior = my_prior)
tt_ce <- conditional_effects(tt)
plot(tt_ce, points = TRUE)
library(brms)
bfmod <- brms::bf(y ~ top + (bot - top) / (1 + exp((ec50 - x) * exp(beta))),
bot + ec50 + top + beta ~ 1,
nl = TRUE)
my_prior <- c(prior_string("normal(5, 5)", nlpar = "top"),
prior_string("normal(-5, 5)", nlpar = "bot"),
prior_string("gamma(5, 0.04)", nlpar = "ec50"),
prior_string("normal(0, 3)", nlpar = "beta"))
tt <- brm(formula = bfmod, data = dat, prior = my_prior)
tt_ce <- conditional_effects(tt)
plot(tt_ce, points = TRUE)
library(brms)
bfmod <- brms::bf(y ~ top + (bot - top) / (1 + exp((ec50 - x) * exp(beta))),
bot + ec50 + top + beta ~ 1,
nl = TRUE)
my_prior <- c(prior_string("normal(5, 5)", nlpar = "top"),
prior_string("normal(-5, 5)", nlpar = "bot"),
prior_string("normal(5, 0.04)", nlpar = "ec50"),
prior_string("normal(0, 3)", nlpar = "beta"))
tt <- brm(formula = bfmod, data = dat, prior = my_prior)
tt_ce <- conditional_effects(tt)
plot(tt_ce, points = TRUE)
library(brms); options(mc.cores = parallel::detectCores())
bfmod <- brms::bf(y ~ top + (bot - top) / (1 + exp((ec50 - x) * exp(beta))),
bot + ec50 + top + beta ~ 1,
nl = TRUE)
my_prior <- c(prior_string("normal(5, 5)", nlpar = "top"),
prior_string("normal(-5, 5)", nlpar = "bot"),
prior_string("normal(0, 3)", nlpar = "ec50"),
prior_string("normal(0, 3)", nlpar = "beta"))
tt <- brm(formula = bfmod, data = dat, prior = my_prior)
tt_ce <- conditional_effects(tt)
plot(tt_ce, points = TRUE)
getwd()
source('prevalence.R')
source('prevalence.R')
source('prevalence.R')
source('prevalence.R')
source('prevalence.R')
source('prevalence.R')
source('prevalence.R')
devtools::install_github("kholsinger/Hickory")
help("Hickory")
library(Hickory)
help("Hickory")
genos <- read_marker_data(system.file("extdata", "protea_repens.csv", package = "Hickory"))
genos$n
setwd("/Volumes/kent/Documents/EEB-348/Lecture-Notes-in-Population-Genetics/Data")
dat <- read_csv("isotoma.csv")
library(tidyverse)
dat <- read_csv("isotoma.csv")
dat$n
dat
dat <- read_marker_data("isotoma.csv")
dat$n
dat <- read_csv("isotoma.csv")
help("group_by")
dat %>% group_by(pop, GOT-1) %>% summarize(count = n())
dat %>% group_by(pop, `GOT-1`) %>% summarize(count = n())
new_dat <- dat %>% group_by(pop, `GOT-1`) %>% summarize(count = n())
View(new_dat)
table(dat$pop)
length(table(dat$pop))
View(system.file("extdata", "protea_repens.csv", package = "Hickory"))
dat <- system.file("extdata", "protea_repens.csv", package = "Hickory")
view(dat)
dat <- read_csv(system.file("extdata", "protea_repens.csv", package = "Hickory"))
view(dat)
pwd()
getwd()
genos <- read_marker_data("isotoma.csv")
fit <- analyze_codominant(genos)
genos
str(genos)
genos <- read_marker_data(system.file("extdata", "protea_repens.csv", package = "Hickory"))
str(genos)
help("analyze_codominant")
